<style type="text/css">
		.node {
		  stroke: #fff;
		  fill:#ddd;
		  stroke-width: 1.5px;
		}

		.link {
		  fill: none;
		  stroke: #999;
		  stroke-opacity: .6;
		  stroke-width: 1px;
		}

		marker {
			stroke: #999;
			fill:rgba(124,240,10,0);
		}

		.node-text {
		  font: 11px sans-serif;
		  fill:black;
		}

		.link-text {
		  font: 9px sans-serif;
		  fill:grey;
		}

		svg{
			border:0px solid black;
		}
	</style>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
	<script src="https://d3js.org/d3.v3.min.js"></script>
	<script>
		function filterNodesById(nodes,id){
			return nodes.filter(function(n) { return n.id === id; });
		}

		function filterNodesByType(nodes,value){
			return nodes.filter(function(n) { return n.type === value; });
		}

		function triplesToGraph(triples){

			svg.html("");
			//Graph
			var graph={nodes:[], links:[], triples:[]};

			//Initial Graph from triples
			triples.forEach(function(triple){
        if (triple.length >= 3){
          var subjId = triple[0];
          var predId = triple[1];
          var objId = triple[2];

          var subjNode = filterNodesById(graph.nodes, subjId)[0];
          var objNode  = filterNodesById(graph.nodes, objId)[0];

          if(subjNode==null){
            subjNode = {id:subjId, label:subjId, weight:1, type:"node"};
            graph.nodes.push(subjNode);
          }

          if(objNode==null){
            objNode = {id:objId, label:objId, weight:1, type:"node"};
            graph.nodes.push(objNode);
          }

          var predNode = {id:predId, label:predId, weight:1, type:"pred"} ;
          graph.nodes.push(predNode);

          var blankLabel = "";

          graph.links.push({source:subjNode, target:predNode, predicate:blankLabel, weight:1});
          graph.links.push({source:predNode, target:objNode, predicate:blankLabel, weight:1});

          graph.triples.push({s:subjNode, p:predNode, o:objNode});
        }
			});

			return graph;
		}


		function update(){
			// ==================== Add Marker ====================
			svg.append("svg:defs").selectAll("marker")
			    .data(["end"])
			  .enter().append("svg:marker")
			    .attr("id", String)
			    .attr("viewBox", "0 -5 10 10")
			    .attr("refX", 30)
			    .attr("refY", -0.5)
			    .attr("markerWidth", 6)
			    .attr("markerHeight", 6)
			    .attr("orient", "auto")
			  .append("svg:polyline")
			    .attr("points", "0,-5 10,0 0,5")
			    ;

			// ==================== Add Links ====================
			 var links = svg.selectAll(".link")
								.data(graph.triples)
								.enter()
								.append("path")
									.attr("marker-end", "url(#end)")
									.attr("class", "link")
							;

			// ==================== Add Link Names =====================
			var linkTexts = svg.selectAll(".link-text")
		                .data(graph.triples)
		                .enter()
		                .append("text")
							.attr("class", "link-text")
							.text( function (d) { return d.p.label; })
						;

				//linkTexts.append("title")
				//		.text(function(d) { return d.predicate; });

			// ==================== Add Link Names =====================
			var nodeTexts = svg.selectAll(".node-text")
		                .data(filterNodesByType(graph.nodes, "node"))
		                .enter()
		                .append("text")
							.attr("class", "node-text")
							.text( function (d) { return d.label; })
						;

				//nodeTexts.append("title")
				//		.text(function(d) { return d.label; });

			// ==================== Add Node =====================
			var nodes = svg.selectAll(".node")
								.data(filterNodesByType(graph.nodes, "node"))
								.enter()
								.append("circle")
									.attr("class", "node")
									.attr("r",8)
									.call(force.drag)
							;//nodes

			// ==================== Force ====================
			force.on("tick", function() {
				nodes
					.attr("cx", function(d){ return d.x; })
					.attr("cy", function(d){ return d.y; })
					;

				links
					.attr("d", function(d) {
						  return "M" 	+ d.s.x + "," + d.s.y
										+ "S" + d.p.x + "," + d.p.y
										+ " " + d.o.x + "," + d.o.y;
						})
					;

				nodeTexts
					.attr("x", function(d) { return d.x + 12 ; })
					.attr("y", function(d) { return d.y + 3; })
					;


				linkTexts
					.attr("x", function(d) { return 4 + (d.s.x + d.p.x + d.o.x)/3  ; })
					.attr("y", function(d) { return 4 + (d.s.y + d.p.y + d.o.y)/3 ; })
					;
			});

			// ==================== Run ====================
			force
		      .nodes(graph.nodes)
		      .links(graph.links)
			  .charge(-200)
			  .linkDistance(50)
		      .start()
			  ;
		}


	</script>


  <div id="svg-body" class="panel-body"></div>
  <script>
  	var triples = ${TRIPLES} ;

	var svg = d3.select("#svg-body").append("svg")
				.attr("width", ${WIDTH} )
				.attr("height", ${HEIGHT} )
				;

	var force = d3.layout.force().size([ ${WIDTH}, ${HEIGHT} ]);

	var graph = triplesToGraph(triples);

	update();

  </script>
